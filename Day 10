  
   Problem Statement: Majority Element or Majority Element (>n/2 times)

   Problem: https://leetcode.com/problems/majority-element/

Solution of the Problem:

class Solution {
    public int majorityElement(int[] nums) {
        int count=0;
        int ele=0;

        for(int i =0; i<nums.length; i++)
        {
          if(count==0)
            {
                 count = 1;
                 ele = nums[i];
            }
            else if(nums[i]==ele){
                count++;
            }
            else
            {
                count--;
            }
        }

        int count1=0;
                
                for(int i=0; i<nums.length; i++)
                {
                    if(nums[i]==ele) 
                    {
                        count1++;
                    }
                }

        if(count1>(nums.length/2))
        {
            return ele;
        }
        return -1;
    }
}

The code I have shared seems to be an implementation of Moore's Voting Algorithm.
This algorithm is used to find the majority element in an array, which is the element that appears more than `n/2` times in the array (where `n` is the length of the array).
Let's go through the code step by step and understand how it works.

Moore's Voting Algorithm: Concept
Moore's Voting Algorithm works in two main phases:
  1. Candidate Selection Phase: In this phase, the algorithm selects a candidate that might be the majority element.
  2. Candidate Verification Phase**: In this phase, the algorithm checks whether the selected candidate is actually the majority element.

Steps of the Algorithm

    1. Candidate Selection Phase:
    - We start by initializing two variables: `count` and `ele`. `count` keeps track of how many times we've encountered a particular candidate, and `ele` stores the current candidate for the majority element.
    - We iterate through the array and for each element:
      - If `count` is `0`, it means we need a new candidate, so we set `ele` to the current element and reset `count` to `1`.
      - If the current element is the same as `ele`, we increment `count` because we've found another instance of our candidate.
      - If the current element is different from `ele`, we decrement `count`. This reflects the idea that this different element is "opposing" our candidate, so we reduce the count.
    
    This phase ends with `ele` holding a potential majority element.
    
    2. Candidate Verification Phase:
    - After the first pass, we need to verify whether `ele` is actually the majority element. We do this by counting how many times `ele` appears in the array.
    - If `ele` appears more than `n/2` times, then `ele` is indeed the majority element, and we return it.
    - If not, there is no majority element in the array, so we return `-1`.


Example Walkthrough

  Consider an array `nums = [2, 2, 1, 1, 1, 2, 2]`.
    
    - Iteration 1: `i = 0`, `count = 0`, `ele = 0`
      - `count == 0`, so `ele = 2`, `count = 1`.
    - Iteration 2: `i = 1`, `count = 1`, `ele = 2`
      - `nums[1] == ele`, so `count = 2`.
    - Iteration 3: `i = 2`, `count = 2`, `ele = 2`
      - `nums[2] != ele`, so `count = 1`.
    - Iteration 4: `i = 3`, `count = 1`, `ele = 2`
      - `nums[3] != ele`, so `count = 0`.
    - Iteration 5: `i = 4`, `count = 0`, `ele = 2`
      - `count == 0`, so `ele = 1`, `count = 1`.
    - Iteration 6: `i = 5`, `count = 1`, `ele = 1`
      - `nums[5] != ele`, so `count = 0`.
    - Iteration 7: `i = 6`, `count = 0`, `ele = 1`
      - `count == 0`, so `ele = 2`, `count = 1`.
    
   After this loop, `ele = 2`, which is a potential majority element.
    
    Now, we verify the count of `2` in the array:
    - `count1 = 4`, which is greater than `7/2 = 3.5`.
    
    Since the count of `2` is greater than half the array length, `2` is the majority element.

Complexity
- Time Complexity: `O(n)` for both finding the candidate and verifying it.
- Space Complexity: `O(1)` because we are using only a few extra variables.

This algorithm is efficient and works well when a majority element is guaranteed to exist.

    
