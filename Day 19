  
   Problem Statement: Find the first or last occurrence of a given number in a sorted array or Find First and Last Position of Element in Sorted Array
   Problem: https://leetcode.com/problems/subarray-sum-equals-k/
Solution of the Problem:

class Solution {
    public int[] searchRange(int[] nums, int target) {

        int first = firstOccurrence(nums, target);
        if(first == -1) return new int[] { -1, -1 }; 
        int last = lastOccurrence(nums, target);

        return new int[] { first, last }; 
    }
    
    // Method to find the first occurrence of target
    int firstOccurrence(int[] nums, int target) {      
        int low = 0, high = nums.length - 1;
        int first = -1;        

        while(low <= high) {
            int mid = (low + high) / 2;
            
            if(nums[mid] == target) {
                first = mid;
                high = mid - 1;  // Continue searching in the left half
            } else if(nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return first;
    }

    // Method to find the last occurrence of target
    int lastOccurrence(int[] nums, int target) {      
        int low = 0, high = nums.length - 1;
        int last = -1;        

        while(low <= high) {
            int mid = (low + high) / 2;
            
            if(nums[mid] == target) {
                last = mid;
                low = mid + 1;  // Continue searching in the right half
            } else if(nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return last;
    }
}

 


   
