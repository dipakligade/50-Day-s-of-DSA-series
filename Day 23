  
   Problem Statement: Koko Eating Bananas 
   Problem: https://leetcode.com/problems/koko-eating-bananas
Solution of the Problem:

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int left = 1; // Minimum possible speed
        int right = getMaxPile(piles); // Maximum possible speed is the size of the largest pile

        while (left < right) {
            int mid = left + (right - left) / 2; // Middle speed
            if (canEatAll(piles, h, mid)) {
                right = mid; // Try a smaller speed
            } else {
                left = mid + 1; // Increase the speed
            }
        }
        
        return left; // The minimum speed at which Koko can eat all bananas
    }

    // Function to get the largest pile
    private int getMaxPile(int[] piles) {
        int maxPile = 0;
        for (int pile : piles) {
            maxPile = Math.max(maxPile, pile);
        }
        return maxPile;
    }

    // Function to check if Koko can eat all bananas at speed k within h hours
    private boolean canEatAll(int[] piles, int h, int k) {
        int hoursNeeded = 0;
        for (int pile : piles) {
            hoursNeeded += (pile + k - 1) / k; // Equivalent to Math.ceil(pile / k)
        }
        return hoursNeeded <= h;
    }
}
